generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  defaultUsers  User[]          @relation("AreaDefaultUsers")
  userAreas     UserArea[]
  flows         Flow[]
  conversations Conversation[]
  contacts      Contact[]
  workingHours  WorkingHour[]

  @@map("areas")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  username      String    @unique
  email         String?   @unique
  passwordHash  String    @map("password_hash")
  role          UserRole  @default(OPERATOR)
  defaultAreaId Int?      @map("default_area_id")
  isActive      Boolean   @default(true) @map("is_active")
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  defaultArea        Area?               @relation("AreaDefaultUsers", fields: [defaultAreaId], references: [id])
  areas              UserArea[]
  flows              Flow[]              @relation("FlowCreator")
  botSessions        BotSession[]
  assignedChats      Conversation[]      @relation("ConversationAssignedTo")
  closedChats        Conversation[]      @relation("ConversationClosedBy")
  conversationEvents ConversationEvent[]
  messages           Message[]

  @@map("users")
}

model UserArea {
  userId     Int      @map("user_id")
  areaId     Int      @map("area_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  user User @relation(fields: [userId], references: [id])
  area Area @relation(fields: [areaId], references: [id])

  @@id([userId, areaId])
  @@map("user_areas")
}

model BotSession {
  id          Int              @id @default(autoincrement())
  ownerUserId Int              @map("owner_user_id")
  status      BotSessionStatus @default(DISCONNECTED)
  sessionName String           @default("default") @map("session_name")
  connectedAt DateTime?        @map("connected_at")
  lastQr      String?          @map("last_qr")
  headless    Boolean          @default(true)
  paused      Boolean          @default(false)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  owner User @relation(fields: [ownerUserId], references: [id])

  @@unique([ownerUserId, sessionName], map: "ux_bot_sessions_owner")
  @@map("bot_sessions")
}

model Flow {
  id         Int      @id @default(autoincrement())
  name       String
  trigger    String?
  message    String
  type       FlowType @default(MESSAGE)
  parentId   Int?     @map("parent_id")
  areaId     Int?     @map("area_id")
  orderIndex Int      @default(0) @map("order_index")
  metadata   Json?
  isActive   Boolean  @default(true) @map("is_active")
  createdBy  Int      @map("created_by")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  parent   Flow?  @relation("FlowHierarchy", fields: [parentId], references: [id])
  children Flow[] @relation("FlowHierarchy")
  area     Area?  @relation(fields: [areaId], references: [id])
  creator  User   @relation("FlowCreator", fields: [createdBy], references: [id])

  @@index([parentId], map: "idx_flows_parent")
  @@index([areaId], map: "idx_flows_area")
  @@index([trigger], map: "idx_flows_trigger")
  @@map("flows")
}

model Conversation {
  id               BigInt             @id @default(autoincrement())
  userPhone        String             @map("user_phone")
  contactName      String?            @map("contact_name")
  contactId        Int?               @map("contact_id")
  areaId           Int?               @map("area_id")
  assignedToId     Int?               @map("assigned_to")
  status           ConversationStatus @default(PENDING)
  botActive        Boolean            @default(true) @map("bot_active")
  lastActivity     DateTime           @default(now()) @map("last_activity")
  lastBotMessageAt DateTime?          @map("last_bot_message_at")
  closedAt         DateTime?          @map("closed_at")
  closedReason     String?            @map("closed_reason")
  closedById       Int?               @map("closed_by")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  area       Area?               @relation(fields: [areaId], references: [id])
  assignedTo User?               @relation("ConversationAssignedTo", fields: [assignedToId], references: [id])
  closedBy   User?               @relation("ConversationClosedBy", fields: [closedById], references: [id])
  contact    Contact?            @relation(fields: [contactId], references: [id])
  messages   Message[]
  events     ConversationEvent[]

  @@index([userPhone], map: "idx_conversations_user_phone")
  @@index([status], map: "idx_conversations_status")
  @@index([areaId], map: "idx_conversations_area")
  @@index([assignedToId], map: "idx_conversations_assigned_to")
  @@index([lastActivity], map: "idx_conversations_last_activity")
  @@index([contactId], map: "idx_conversations_contact")
  @@map("conversations")
}

model Message {
  id             BigInt        @id @default(autoincrement())
  conversationId BigInt        @map("conversation_id")
  senderType     MessageSender @map("sender_type")
  senderId       Int?          @map("sender_id")
  content        String
  mediaType      String?       @map("media_type")
  mediaUrl       String?       @map("media_url")
  isDelivered    Boolean       @default(true) @map("is_delivered")
  externalId     String?       @unique @map("external_id")
  createdAt      DateTime      @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User?        @relation(fields: [senderId], references: [id])

  @@index([conversationId], map: "idx_messages_conversation")
  @@index([senderType, senderId], map: "idx_messages_sender")
  @@map("messages")
}

model ConversationEvent {
  id             BigInt                @id @default(autoincrement())
  conversationId BigInt                @map("conversation_id")
  eventType      ConversationEventType @map("event_type")
  payload        Json?
  createdById    Int?                  @map("created_by")
  createdAt      DateTime              @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id])
  createdBy    User?        @relation(fields: [createdById], references: [id])

  @@index([conversationId], map: "idx_conversation_events_conversation")
  @@map("conversation_events")
}

model Session {
  sid     String    @id @map("sid")
  expires DateTime?
  data    String?

  @@map("sessions")
}

model Contact {
  id          Int         @id @default(autoincrement())
  name        String
  phone       String      @unique
  dni         String?     @db.VarChar(20)
  areaId      Int?        @map("area_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  area         Area?        @relation(fields: [areaId], references: [id])
  conversations Conversation[]

  @@map("contacts")
}

model WorkingHour {
  id         Int      @id @default(autoincrement())
  areaId     Int      @map("area_id")
  startTime  String   @map("start_time")
  endTime    String   @map("end_time")
  days       String
  message    String?  @map("message")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  area Area @relation(fields: [areaId], references: [id])

  @@map("working_hours")
}

enum UserRole {
  ADMIN      @map("admin")
  SUPERVISOR @map("supervisor")
  OPERATOR   @map("operator")
  SUPPORT    @map("support")
  SALES      @map("sales")
}

enum BotSessionStatus {
  CONNECTED    @map("connected")
  CONNECTING   @map("connecting")
  DISCONNECTED @map("disconnected")
  ERROR        @map("error")
}

enum FlowType {
  MESSAGE  @map("message")
  MENU     @map("menu")
  ACTION   @map("action")
  REDIRECT @map("redirect")
  END      @map("end")
}

enum ConversationStatus {
  PENDING @map("pending")
  ACTIVE  @map("active")
  PAUSED  @map("paused")
  CLOSED  @map("closed")
}

enum MessageSender {
  CONTACT  @map("contact")
  BOT      @map("bot")
  OPERATOR @map("operator")
}

enum ConversationEventType {
  ASSIGNMENT    @map("assignment")
  STATUS_CHANGE @map("status_change")
  BOT_TOGGLE    @map("bot_toggle")
  NOTE          @map("note")
}
